/**
 * TeamQuiz Entity (Junction Table)
 * 
 * Purpose: Links teams to quizzes with quiz-specific data.
 * 
 * Why Junction Table?
 * - Many-to-Many relationship: One team can participate in many quizzes,
 *   and one quiz can have many teams
 * - Stores quiz-specific data that doesn't belong in Team entity:
 *   * Team number/position (different per quiz)
 *   * All scores for this team in this specific quiz
 * 
 * Architecture Benefits:
 * - Same team can have different numbers in different quizzes
 * - Team can be reused across multiple quizzes
 * - Quiz-specific data is properly isolated
 * 
 * Example:
 * - Team "Champions" participates in Quiz 1 as team #3
 * - Same "Champions" team participates in Quiz 2 as team #1
 * - Two separate TeamQuiz entries with different 'nr' values
 * 
 * Performance Optimization:
 * - Composite index on (quiz, team) for fast quiz-team lookups
 * - Individual indexes on teamId and quizId for join operations
 * - Index on 'nr' for sorting teams within a quiz
 * 
 * Database Table: "team_quiz"
 */

import { Entity, PrimaryGeneratedColumn, ManyToOne, OneToMany, Index, Column } from "typeorm";
import { Quiz } from "./Quiz";
import { Team } from "./Team";
import { Score } from "./Score";

@Entity()
@Index(['quiz', 'team']) // Composite index for quiz-team lookups (O(log n) instead of O(n))
export class TeamQuiz {
    /**
     * Primary key - unique identifier for this team-quiz participation
     * Auto-generated by the database
     */
    @PrimaryGeneratedColumn()
    id!: number;

    /**
     * Team number/position within THIS specific quiz
     * 
     * Quiz-specific: Same team can have different numbers in different quizzes
     * Used for: Display order, sorting, labeling (e.g., "#1. Champions")
     * 
     * Example in Quiz 1: Team "Champions" has nr=3
     * Example in Quiz 2: Same "Champions" team has nr=1
     * 
     * Indexed for performance: Enables fast sorting (ORDER BY nr ASC)
     * Default: 1 (first team added gets nr=1, second gets nr=2, etc.)
     */
    @Column({ default: 1 })
    @Index() // Index on nr for sorting teams within a quiz
    nr!: number;

    /**
     * Excluded flag - indicates if team didn't show up for the quiz
     * 
     * When true: Team is hidden from scoring pages but remains in quiz setup
     * Hidden from: Scoreboard, AddScore, ChartView, Top5
     * Still visible in: QuizManagement (team list with toggle)
     * 
     * Use case: Team registered but didn't show up, want to keep record
     * Default: false (team is participating)
     * 
     * Indexed for performance: Enables fast filtering (WHERE excluded = false)
     */
    @Column({ default: false })
    @Index() // Index on excluded for filtering active teams
    excluded!: boolean;

    /**
     * Reference to the actual Team entity
     * Many TeamQuiz entries can reference the same Team
     * 
     * Contains: Team name and other team-level data
     * Indexed for performance: Enables fast joins when fetching quiz data
     * Foreign key: team_quiz.teamId → team.id
     */
    @ManyToOne(() => Team, team => team.teamQuizzes)
    @Index() // Index on teamId for faster joins
    team!: Team;

    /**
     * Reference to the Quiz this team is participating in
     * Many teams (TeamQuiz entries) belong to one quiz
     * 
     * Indexed for performance: Enables fast joins when fetching quiz data
     * Foreign key: team_quiz.quizId → quiz.id
     */
    @ManyToOne(() => Quiz, quiz => quiz.teamQuizzes)
    @Index() // Index on quizId for faster joins
    quiz!: Quiz;

    /**
     * All scores for THIS team in THIS quiz across all rounds
     * 
     * Example: Quiz with 20 rounds = 20 score entries per TeamQuiz
     * 
     * Relationship: One TeamQuiz has many Scores (one per round)
     * Cascade: When TeamQuiz is deleted, all associated scores are automatically deleted
     * 
     * Used in: Scoreboard calculations, ChartView, total score computation
     */
    @OneToMany(() => Score, score => score.teamQuiz, { cascade: true, onDelete: 'CASCADE' })
    scores!: Score[];
}