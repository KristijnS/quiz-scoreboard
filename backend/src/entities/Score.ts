/**
 * Score Entity
 * 
 * Purpose: Represents a single score entry for one team in one round.
 * 
 * Data Model:
 * - Each Score represents: "Team X scored Y points in Round Z"
 * - Unique combination: One score per (team, round) pair
 * 
 * Example Entries:
 * - Score 1: Team "Champions" (teamQuizId=1) scored 8 points in Round 1 (roundId=1)
 * - Score 2: Team "Champions" (teamQuizId=1) scored 6 points in Round 2 (roundId=2)
 * - Score 3: Team "Warriors" (teamQuizId=2) scored 9 points in Round 1 (roundId=1)
 * 
 * Scale Math:
 * - For quiz with 40 teams and 20 rounds = 800 score entries (40 × 20)
 * - Scores are converted using: (points / round.maxScore) * quiz.standardScale
 * - Only converted when quiz.scaleConversionEnabled=true AND round.excludeFromScale=false
 * 
 * Performance Optimization:
 * - Composite index on (round, teamQuiz) for fast scoreboard queries
 * - Individual indexes on roundId and teamQuizId for join operations
 * - These indexes enable O(log n) lookups instead of O(n) table scans
 * 
 * Critical for:
 * - Scoreboard rendering (fast fetch of all scores for a quiz)
 * - ChartView calculations (team totals across rounds)
 * - Score entry validation (checking if score already exists)
 * 
 * Database Table: "score"
 */

import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, Index } from "typeorm";
import { Round } from "./Round";
import { TeamQuiz } from "./TeamQuiz";

@Entity()
@Index(['round', 'teamQuiz']) // Composite index for common scoreboard queries (O(log n) lookup)
export class Score {
    /**
     * Primary key - unique identifier for this score entry
     * Auto-generated by the database
     */
    @PrimaryGeneratedColumn()
    id!: number;

    /**
     * Points scored by the team in this round
     * 
     * Raw score value (NOT converted)
     * Conversion happens in frontend calculations when needed
     * 
     * Validation:
     * - Should be >= 0
     * - Should be <= round.maxScore (validated in frontend/API)
     * 
     * Example: 8 points out of max 10 for the round
     */
    @Column()
    points!: number;

    /**
     * Reference to the Round (question/category)
     * Many scores can be for the same round (one per team)
     * 
     * Indexed for performance: Enables fast joins when fetching quiz data
     * Foreign key: score.roundId → round.id
     * 
     * Provides: Round title, number, maxScore, excludeFromScale flag
     */
    @ManyToOne(() => Round, round => round.scores)
    @Index() // Index on roundId for faster joins
    round!: Round;

    /**
     * Reference to the TeamQuiz (which team in which quiz)
     * Many scores belong to the same TeamQuiz (one per round)
     * 
     * Indexed for performance: Enables fast joins when fetching quiz data
     * Foreign key: score.teamQuizId → team_quiz.id
     * 
     * Provides access to:
     * - Team information (name)
     * - Quiz-specific data (team number)
     * - All other scores for this team in this quiz
     */
    @ManyToOne(() => TeamQuiz, teamQuiz => teamQuiz.scores)
    @Index() // Index on teamQuizId for faster joins
    teamQuiz!: TeamQuiz;
}